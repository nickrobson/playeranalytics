buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: project.forge_gradle_version, changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

group = project.mod_group
archivesBaseName = project.mod_id
version = "${project.mod_version}-forge${project.minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println("Building on Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}) Arch: ${System.getProperty('os.arch')}")
println("Minecraft ${project.minecraft_version}, Forge ${project.forge_version}")

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    mappings channel: 'official', version: project.minecraft_version

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                playeranalytics { source sourceSets.main }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                playeranalytics { source sourceSets.main }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'playeranalytics', // mod ID for data generation
                    '--all', // generate all data
                    '--output', file('src/generated/resources/'), // output to here
                    '--existing', file('src/main/resources/') // existing extra resources are here

            mods {
                playeranalytics { source sourceSets.main }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    inputs.property "version", project.version

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand "mod_id": project.mod_id,
                "mod_version": project.mod_version,
                "mod_name": project.mod_name,
                "mod_description": project.mod_description,
                "forge_api_version": project.forge_api_version
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    // compileOnly 'org.apache.commons:commons-lang3:3.8.1'
    // compileOnly 'org.apache.logging.log4j:log4j-api:2.14.1'
    // compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
    // compileOnly 'com.google.code.gson:gson:2.8.0'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "playeranalytics",
                "Specification-Vendor"    : "nickrobson",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "playeranalytics",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives jar
}
